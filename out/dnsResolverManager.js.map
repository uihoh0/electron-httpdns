{"version":3,"sources":["../src/dnsResolverManager.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAOA,MAAM,GAAG,GAAG,oBAAS,GAAT,IAAgB,oBAAS,MAAT,CAAgB,GAA5C;;AACM,SAAU,iBAAV,GAA2B;AAC/B,SAAO,GAAG,CAAC,UAAJ,GAAiB,cAAK,IAAL,CAAU,OAAO,CAAC,aAAlB,EAAmC,gBAAnC,CAAjB,GAAwE,cAAK,IAAL,CAAU,GAAG,CAAC,UAAJ,EAAV,EAA4B,oBAA5B,CAA/E;AACD;;AACD,IAAI,aAAJ;AACA,IAAI,QAAQ,GAA4B,KAAxC;;AACO,eAAe,aAAf,GAA4B;AACjC,MAAG,aAAa,KAAK,SAArB,EAA+B;AAC7B,WAAO,aAAP;AACD;;AACD,QAAM,UAAU,GAAG,iBAAiB,EAApC;AACA,QAAM,MAAM,GAAY,yBAAS,MAAM,0BAAS,UAAT,EAAqB,OAArB,CAAf,EAAxB;AACA,EAAA,aAAa,GAAG,MAAM,CAAC,OAAP,GAAiB,MAAM,CAAC,OAAxB,GAAkC,IAAlD;AACA,SAAO,aAAP;AACD;;AACc,eAAe,kBAAf,GAAiC;AAC9C,MAAG,QAAH,EAAY;AACV,WAAO,QAAP;AACD;;AACD,QAAM,OAAO,GAAG,MAAM,aAAa,EAAnC;;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,KAAP;AACD;;AACD,UAAO,OAAO,CAAC,IAAf;AACE,SAAK,KAAL;AACE,MAAA,QAAQ,GAAI,KAAI,wBAAJ,EAAkB,OAAlB,CAAZ;AACA;;AACF;AACE;AALJ;;AAOA,SAAO,QAAP;AACD,C","sourcesContent":["import { readFile } from \"fs-extra-p\"\nimport { safeLoad } from 'js-yaml'\nimport path from 'path'\nimport electron from 'electron'\n\nimport BasicIPResolver from './BasicIPResolver'\nimport AliIPResolver from './AliIPResolver'\n\n\ninterface YmlConf {\n  httpdns: any\n}\n\nconst app = electron.app || electron.remote.app;\nexport function getUpdateInfoPath() {\n  return app.isPackaged ? path.join(process.resourcesPath!!, \"app-update.yml\") : path.join(app.getAppPath(), 'dev-app-update.yml')\n}\nlet httpdnsConfig : any \nlet resolver: BasicIPResolver | false = false\nexport async function getUpdateInfo ():Promise<any> {\n  if(httpdnsConfig !== undefined){\n    return httpdnsConfig\n  }\n  const configPath = getUpdateInfoPath()\n  const config: YmlConf = safeLoad(await readFile(configPath, \"utf-8\"))\n  httpdnsConfig = config.httpdns ? config.httpdns : null\n  return httpdnsConfig\n}\nexport default async function dnsResolverManager(): Promise<BasicIPResolver | false> {\n  if(resolver){\n    return resolver\n  }\n  const httpdns = await getUpdateInfo()\n  if (!httpdns) {\n    return false\n  }\n  switch(httpdns.type){\n    case 'ali': \n      resolver =  new AliIPResolver(httpdns)\n      break;\n    default: \n      break;\n  }\n  return resolver\n}"],"sourceRoot":""}
